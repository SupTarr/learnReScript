// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Test = require("./test.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");

function intAverage(_x, _y) {
  return Pervasives.failwith("For you to implement");
}

function floatAverage(_x, _y) {
  return Pervasives.failwith("For you to implement");
}

var firstName = "Fred";

var lastName = "Flintstone";

var fullName = "Fred Flintstone";

console.log("Hi, My name is ");

console.log(fullName);

console.log(" and I am 5 years old");

Test.runAll([
      [
        Pervasives.failwith("For you to implement") === 5,
        "int average"
      ],
      [
        Pervasives.failwith("For you to implement") === 5,
        "float average"
      ],
      [
        Pervasives.failwith("For you to implement") === 7.5,
        "float average"
      ]
    ]);

function _add1(arg) {
  return arg + 1 | 0;
}

function stringAppend(x, y) {
  return x + y;
}

function minus(_x, _y) {
  return Pervasives.failwith("For you to implement");
}

Test.runAll([
      [
        Pervasives.failwith("For you to implement") === 2,
        "plus"
      ],
      [
        Pervasives.failwith("For you to implement") === 49,
        "plus"
      ],
      [
        Pervasives.failwith("For you to implement") === 64,
        "times"
      ],
      [
        Pervasives.failwith("For you to implement") === -2048,
        "times"
      ],
      [
        Pervasives.failwith("For you to implement") === -4,
        "minus"
      ],
      [
        Pervasives.failwith("For you to implement") === 1000,
        "minus"
      ],
      [
        Pervasives.failwith("For you to implement") === 512,
        "divide"
      ],
      [
        Pervasives.failwith("For you to implement") === 1010,
        "divide"
      ]
    ]);

function half(x) {
  return x / 2 | 0;
}

function _add(x, y) {
  return x + y | 0;
}

console.log("(5^2)/2 = " + String(12));

var halved = 12;

var toString = String(halved);

console.log("(5^2)/2 = " + toString);

function average(_x, _y) {
  return Pervasives.failwith("For you to implement");
}

Test.runAll([
      [
        Pervasives.failwith("For you to implement") === 5,
        "average"
      ],
      [
        Pervasives.failwith("For you to implement") === 75,
        "average"
      ]
    ]);

function add1(_x) {
  return Pervasives.failwith("For you to implement");
}

function square(_x) {
  return Pervasives.failwith("For you to implement");
}

function twice(_f, _x) {
  return Pervasives.failwith("For you to implement");
}

var add2 = Pervasives.failwith("For you to implement");

var raiseToTheFourth = Pervasives.failwith("For you to implement");

Test.runAll([
      [
        Pervasives.failwith("For you to implement") === 5,
        "add1"
      ],
      [
        Pervasives.failwith("For you to implement") === 16,
        "square"
      ],
      [
        Pervasives.failwith("For you to implement") === 16,
        "square"
      ],
      [
        Pervasives.failwith("For you to implement") === 5,
        "twice"
      ],
      [
        Curry._1(add2, 1335) === 1337,
        "add2"
      ],
      [
        Curry._1(raiseToTheFourth, 1) === 1,
        "raiseToTheFourth"
      ],
      [
        Curry._1(raiseToTheFourth, 10) === 10000,
        "raiseToTheFourth"
      ]
    ]);

function isSuperman(x) {
  if (x === "Clark Kent") {
    return true;
  } else {
    return false;
  }
}

function nonZero(_x) {
  return Pervasives.failwith("For you to implement");
}

Test.runAll([
      [
        Pervasives.failwith("For you to implement") === false,
        "non zero"
      ],
      [
        Pervasives.failwith("For you to implement") === true,
        "non zero"
      ],
      [
        Pervasives.failwith("For you to implement") === true,
        "non zero"
      ]
    ]);

function addEveryNumberUpTo(x) {
  if (x < 0) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "lrw.res",
            292,
            2
          ],
          Error: new Error()
        };
  }
  if (x !== 0) {
    return x + addEveryNumberUpTo(x - 1 | 0) | 0;
  } else {
    return 0;
  }
}

addEveryNumberUpTo(10);

function factorial(x) {
  if (x < 0) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "lrw.res",
            306,
            2
          ],
          Error: new Error()
        };
  }
  return Pervasives.failwith("For you to implement");
}

Test.runAll([
      [
        factorial(0) === 1,
        "factorial"
      ],
      [
        factorial(5) === 120,
        "factorial"
      ],
      [
        factorial(12) === 479001600,
        "factorial"
      ]
    ]);

function length(lst) {
  if (lst) {
    return 1 + length(lst.tl) | 0;
  } else {
    return 0;
  }
}

function newHead(hd, rest) {
  return {
          hd: hd,
          tl: rest
        };
}

Test.runAll([
      [
        Pervasives.failwith("For you to implement") === 0,
        "sum"
      ],
      [
        Pervasives.failwith("For you to implement") === 55,
        "sum"
      ],
      [
        Pervasives.failwith("For you to implement") === 0,
        "sum"
      ],
      [
        Pervasives.failwith("For you to implement") === 12,
        "sum"
      ]
    ]);

function range(_from, _to) {
  return Pervasives.failwith("For you to implement");
}

Test.runAll([
      [
        Caml_obj.caml_equal(Pervasives.failwith("For you to implement"), [
              1,
              2,
              3
            ]),
        "range"
      ],
      [
        Caml_obj.caml_equal(Pervasives.failwith("For you to implement"), [
              -5,
              -4,
              -3,
              -2,
              -1,
              0,
              1,
              2
            ]),
        "range"
      ]
    ]);

function product(xs) {
  return Pervasives.failwith("For you to implement");
}

Test.runAll([
      [
        product([]) === 1,
        "product"
      ],
      [
        product([55]) === 55,
        "product"
      ],
      [
        product([
              5,
              -5,
              1,
              -1
            ]) === 25,
        "product"
      ],
      [
        product([
              5,
              5,
              1,
              1
            ]) === 25,
        "product"
      ]
    ]);

function plus(x, y) {
  return x + y | 0;
}

function times(x, y) {
  return Math.imul(x, y);
}

function addEveryNumberUpTo$1(x) {
  if (x !== 0) {
    return x + addEveryNumberUpTo$1(x - 1 | 0) | 0;
  } else {
    return 0;
  }
}

function factorial$1(x) {
  if (x !== 0) {
    return Math.imul(x, factorial$1(x - 1 | 0));
  } else {
    return 1;
  }
}

function upTo(answer, combine, x) {
  if (x !== 0) {
    return Curry._2(combine, x, upTo(answer, combine, x - 1 | 0));
  } else {
    return answer;
  }
}

function simplerAddEveryNumberUpTo(x) {
  return upTo(0, plus, x);
}

function simplerFactorial(x) {
  return upTo(1, times, x);
}

function sum(xs) {
  if (xs) {
    return xs.hd + sum(xs.tl) | 0;
  } else {
    return 0;
  }
}

function product$1(xs) {
  if (xs) {
    return Math.imul(xs.hd, product$1(xs.tl));
  } else {
    return 1;
  }
}

function _every(_answer, _combine, _xs) {
  return Pervasives.failwith("For you to implement");
}

function simplerSum(_xs) {
  return Pervasives.failwith("For you to implement");
}

function simplerProduct(_xs) {
  return Pervasives.failwith("For you to implement");
}

Test.runAll([
      [
        Pervasives.failwith("For you to implement") === 1,
        "simpler product"
      ],
      [
        Pervasives.failwith("For you to implement") === 55,
        "simpler product"
      ],
      [
        Pervasives.failwith("For you to implement") === 25,
        "simpler product"
      ],
      [
        Pervasives.failwith("For you to implement") === 25,
        "simpler product"
      ],
      [
        Pervasives.failwith("For you to implement") === 0,
        "simpler sum"
      ],
      [
        Pervasives.failwith("For you to implement") === 55,
        "simpler sum"
      ],
      [
        Pervasives.failwith("For you to implement") === 0,
        "simpler sum"
      ],
      [
        Pervasives.failwith("For you to implement") === 12,
        "simpler sum"
      ]
    ]);

function largest(xs) {
  if (xs) {
    return Caml_primitive.caml_float_max(xs.hd, largest(xs.tl));
  } else {
    return Pervasives.neg_infinity;
  }
}

largest(/* [] */0);

Test.runAll([
      [
        Pervasives.failwith("For you to implement") === Pervasives.infinity,
        "smallest"
      ],
      [
        Pervasives.failwith("For you to implement") === 55,
        "smallest"
      ],
      [
        Pervasives.failwith("For you to implement") === -5,
        "smallest"
      ],
      [
        Pervasives.failwith("For you to implement") === 1,
        "smallest"
      ]
    ]);

function every(answer, combine, xs) {
  if (xs) {
    return Curry._2(combine, xs.hd, every(answer, combine, xs.tl));
  } else {
    return answer;
  }
}

function largest$1(xs) {
  if (xs) {
    return Caml_primitive.caml_float_max(xs.hd, largest$1(xs.tl));
  } else {
    return Pervasives.neg_infinity;
  }
}

function smallest(xs) {
  if (xs) {
    return Caml_primitive.caml_float_min(xs.hd, smallest(xs.tl));
  } else {
    return Pervasives.infinity;
  }
}

function simplerLargest(_xs) {
  return Pervasives.failwith("For you to implement");
}

function simplerSmallest(_xs) {
  return Pervasives.failwith("For you to implement");
}

Test.runAll([
      [
        Pervasives.failwith("For you to implement") === Pervasives.infinity,
        "simpler smallest"
      ],
      [
        Pervasives.failwith("For you to implement") === 55,
        "simpler smallest"
      ],
      [
        Pervasives.failwith("For you to implement") === -5,
        "simpler smallest"
      ],
      [
        Pervasives.failwith("For you to implement") === 1,
        "simpler smallest"
      ],
      [
        Pervasives.failwith("For you to implement") === Pervasives.neg_infinity,
        "simpler largest"
      ],
      [
        Pervasives.failwith("For you to implement") === 55,
        "simpler largest"
      ],
      [
        Pervasives.failwith("For you to implement") === 5,
        "simpler largest"
      ],
      [
        Pervasives.failwith("For you to implement") === 5,
        "simpler largest"
      ]
    ]);

function toString$1(color) {
  switch (color) {
    case /* Red */0 :
        return "red";
    case /* Green */1 :
        return "green";
    case /* Blue */2 :
        return "blue";
    
  }
}

function cardValueToString(cardValue) {
  if (typeof cardValue !== "number") {
    return String(cardValue._0);
  }
  switch (cardValue) {
    case /* Ace */0 :
        return "Ace";
    case /* King */1 :
        return "King";
    case /* Queen */2 :
        return "Queen";
    case /* Jack */3 :
        return "Jack";
    
  }
}

function cardValueToScore(_cardValue) {
  return Pervasives.failwith("For you to implement");
}

Test.runAll([
      [
        Pervasives.failwith("For you to implement") === 11,
        "card value to score"
      ],
      [
        Pervasives.failwith("For you to implement") === 10,
        "card value to score"
      ],
      [
        Pervasives.failwith("For you to implement") === 10,
        "card value to score"
      ],
      [
        Pervasives.failwith("For you to implement") === 10,
        "card value to score"
      ],
      [
        Pervasives.failwith("For you to implement") === 5,
        "card value to score"
      ]
    ]);

var s = "hello";

if (s !== "hello") {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          630,
          2
        ],
        Error: new Error()
      };
}

function add(_coord1, _coord2) {
  return Pervasives.failwith("For you to implement");
}

function first(_pair) {
  return Pervasives.failwith("For you to implement");
}

function second(_pair) {
  return Pervasives.failwith("For you to implement");
}

Test.runAll([
      [
        Caml_obj.caml_equal(Pervasives.failwith("For you to implement"), [
              4,
              6
            ]),
        "add"
      ],
      [
        Pervasives.failwith("For you to implement") === "foo",
        "first"
      ],
      [
        Pervasives.failwith("For you to implement") === /* "b" */98,
        "second"
      ]
    ]);

var _divide = Caml_int32.div;

var divide = Caml_int32.div;

var modulo = Caml_int32.mod_;

Test.runAll([
      [
        true,
        "modulo"
      ],
      [
        true,
        "modulo"
      ]
    ]);

function whatNumberAmIThinking(myNumber) {
  if (myNumber !== undefined) {
    return "My number is: " + String(myNumber);
  } else {
    return "I'm not thinking of any number!";
  }
}

if (whatNumberAmIThinking(undefined) !== "I'm not thinking of any number!") {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          765,
          0
        ],
        Error: new Error()
      };
}

if (whatNumberAmIThinking(7) !== "My number is: 7") {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          767,
          0
        ],
        Error: new Error()
      };
}

function safeDivide(dividend, divisor) {
  return Caml_int32.div(dividend, divisor);
}

var match = 1;

var match$1 = Caml_int32.div(3, 0);

Test.runAll([
      [
        match === 1,
        "safe divide"
      ],
      [
        match$1 === undefined,
        "safe divide"
      ]
    ]);

function mapOption(f, opt) {
  if (opt !== undefined) {
    return Caml_option.some(Curry._1(f, Caml_option.valFromOption(opt)));
  }
  
}

function $$double(i) {
  return (i << 1);
}

if (mapOption($$double, undefined) !== undefined) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          830,
          9
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(mapOption($$double, 2), 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          832,
          9
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(mapOption((function (i) {
              return (i << 1);
            }), 2), 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          838,
          9
        ],
        Error: new Error()
      };
}

function applyIfNonzero(_f, _i) {
  return Pervasives.failwith("For you to implement");
}

Test.runAll([
      [
        Pervasives.failwith("For you to implement") === 0,
        "apply if non-zero"
      ],
      [
        Pervasives.failwith("For you to implement") === 2,
        "apply if non-zero"
      ]
    ]);

var myInts = {
  hd: 1,
  tl: {
    hd: 2,
    tl: {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }
  }
};

function doubleMyInts(ints) {
  return List.map((function (x) {
                return (x << 1);
              }), ints);
}

if (!Caml_obj.caml_equal(doubleMyInts(myInts), {
        hd: 2,
        tl: {
          hd: 4,
          tl: {
            hd: 6,
            tl: {
              hd: 8,
              tl: {
                hd: 10,
                tl: /* [] */0
              }
            }
          }
        }
      })) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          884,
          9
        ],
        Error: new Error()
      };
}

function myStrings(ints) {
  return List.map((function (prim) {
                return String(prim);
              }), ints);
}

if (!Caml_obj.caml_equal(List.map((function (prim) {
              return String(prim);
            }), myInts), {
        hd: "1",
        tl: {
          hd: "2",
          tl: {
            hd: "3",
            tl: {
              hd: "4",
              tl: {
                hd: "5",
                tl: /* [] */0
              }
            }
          }
        }
      })) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          888,
          9
        ],
        Error: new Error()
      };
}

function myNewInts(_ints) {
  return Pervasives.failwith("For you to implement");
}

List.iter((function (i) {
        console.log("here's an int: " + i);
        
      }), List.map((function (prim) {
            return String(prim);
          }), myInts));

function sumOfMyInts(ints) {
  return List.fold_left((function (total, myInt) {
                return total + myInt | 0;
              }), 0, ints);
}

if (sumOfMyInts(myInts) !== 15) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          921,
          9
        ],
        Error: new Error()
      };
}

function numEvenInts(_ints) {
  return Pervasives.failwith("For you to implement");
}

function firstNumGreaterThan3(ints) {
  return List.find((function (x) {
                return x > 3;
              }), ints);
}

if (firstNumGreaterThan3(myInts) !== 4) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          939,
          9
        ],
        Error: new Error()
      };
}

Test.runAll([
      [
        Caml_obj.caml_equal(Pervasives.failwith("For you to implement"), [
              2,
              3,
              4,
              5,
              6
            ]),
        "my new ints"
      ],
      [
        Pervasives.failwith("For you to implement") === 2,
        "num even ints"
      ]
    ]);

function subtractOne(x) {
  return x - 1 | 0;
}

var Example = {
  theMeaningOfLifeTheUniverseAndEverything: 42,
  subtractOne: subtractOne
};

var oneLessThanTheMeaningOfLifeEtc = 41;

if (oneLessThanTheMeaningOfLifeEtc !== 41) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          972,
          0
        ],
        Error: new Error()
      };
}

function toInt(x) {
  return x;
}

function add$1(x, y) {
  return x + y | 0;
}

var AbstractTypeExample = {
  toInt: toInt,
  zero: 0,
  one: 1,
  add: add$1
};

var two = 2;

var four = two + two | 0;

if (four !== 4) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          1001,
          0
        ],
        Error: new Error()
      };
}

var Fraction = {};

var ints = {
  hd: 1,
  tl: {
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }
};

var sumOfMyInts$1 = List.fold_left((function (total, myInt) {
        return total + myInt | 0;
      }), 0, ints);

if (6 !== sumOfMyInts$1) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          1052,
          9
        ],
        Error: new Error()
      };
}

function map(_f, _lst) {
  return Pervasives.failwith("For you to implement");
}

function iter(_f, _lst) {
  return Pervasives.failwith("For you to implement");
}

function filter(_f, _lst) {
  return Pervasives.failwith("For you to implement");
}

var MyList = {
  map: map,
  iter: iter,
  filter: filter
};

if (List.hd({
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }) !== 1) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          1093,
          9
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(List.tl({
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 3,
                tl: /* [] */0
              }
            }
          }), {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      })) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          1101,
          9
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(List.rev({
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 3,
                tl: /* [] */0
              }
            }
          }), {
        hd: 3,
        tl: {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }
      })) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          1108,
          9
        ],
        Error: new Error()
      };
}

if (!List.mem(3, {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      })) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          1116,
          9
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(List.sort((function (x, y) {
              return x - y | 0;
            }), {
            hd: 3,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          }), {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      })) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          1126,
          9
        ],
        Error: new Error()
      };
}

var acc = {
  contents: 0
};

Pervasives.failwith("For you to implement");

Test.runAll([
      [
        Caml_obj.caml_equal(Pervasives.failwith("For you to implement"), {
              hd: 2,
              tl: {
                hd: 4,
                tl: {
                  hd: 6,
                  tl: {
                    hd: 8,
                    tl: /* [] */0
                  }
                }
              }
            }),
        "MyList.map"
      ],
      [
        acc.contents === 8,
        "MyList.iter"
      ],
      [
        Caml_obj.caml_equal(Pervasives.failwith("For you to implement"), {
              hd: 8,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }),
        "MyList.filter"
      ]
    ]);

function print_info(param) {
  console.log(param.firstName);
  console.log(param.lastName);
  console.log("Age: " + String(param.age));
  console.log("# of cars: " + String(param.numberOfCars));
  
}

function print_name(param) {
  console.log(param.firstName);
  console.log(param.lastName);
  
}

function addOneToAge(person) {
  return {
          age: person.age + 1 | 0,
          firstName: person.firstName,
          lastName: person.lastName,
          numberOfCars: person.numberOfCars
        };
}

if (23 !== addOneToAge({
        age: 22,
        firstName: "Cotton-eyed",
        lastName: "Joe",
        numberOfCars: 0
      }).age) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "lrw.res",
          1199,
          9
        ],
        Error: new Error()
      };
}

function modifyPerson(_person) {
  return Pervasives.failwith("For you to implement");
}

var test_ex1 = {
  age: 55,
  firstName: "Jan",
  lastName: "Saffer",
  numberOfCars: 0
};

var test_ex1$prime = {
  age: 30,
  firstName: "Jan",
  lastName: "Saffer",
  numberOfCars: 0
};

var test_ex2 = {
  age: 4,
  firstName: "Hugo",
  lastName: "Heuzard",
  numberOfCars: 55
};

var test_ex2$prime = {
  age: 4,
  firstName: "Hugo",
  lastName: "Heuzard",
  numberOfCars: 61
};

var ForTesting = {
  test_ex1: test_ex1,
  test_ex1$prime: test_ex1$prime,
  test_ex2: test_ex2,
  test_ex2$prime: test_ex2$prime
};

Test.runAll([
      [
        Caml_obj.caml_equal(Pervasives.failwith("For you to implement"), test_ex1$prime),
        "modifyPerson"
      ],
      [
        Caml_obj.caml_equal(Pervasives.failwith("For you to implement"), test_ex2$prime),
        "modifyPerson"
      ]
    ]);

var anExample = {
  location: "The corner of Vesey Street and the West Side highway",
  color: /* Red */0
};

function setColor(stoplight, color) {
  stoplight.color = color;
  
}

function advanceColor(_stoplight) {
  return Pervasives.failwith("For you to implement");
}

var test_ex_red = {
  location: "",
  color: /* Red */0
};

var test_ex_red$prime = {
  location: test_ex_red.location,
  color: /* Green */2
};

var test_ex_yellow = {
  location: "",
  color: /* Yellow */1
};

var test_ex_yellow$prime = {
  location: test_ex_red.location,
  color: /* Red */0
};

var test_ex_green = {
  location: "",
  color: /* Green */2
};

var test_ex_green$prime = {
  location: test_ex_red.location,
  color: /* Yellow */1
};

var ForTesting2 = {
  test_ex_red: test_ex_red,
  test_ex_red$prime: test_ex_red$prime,
  test_ex_yellow: test_ex_yellow,
  test_ex_yellow$prime: test_ex_yellow$prime,
  test_ex_green: test_ex_green,
  test_ex_green$prime: test_ex_green$prime
};

Pervasives.failwith("For you to implement");

Pervasives.failwith("For you to implement");

Pervasives.failwith("For you to implement");

Test.runAll([
      [
        Caml_obj.caml_equal(test_ex_red, test_ex_red$prime),
        "advance color"
      ],
      [
        Caml_obj.caml_equal(test_ex_yellow, test_ex_yellow$prime),
        "advance color"
      ],
      [
        Caml_obj.caml_equal(test_ex_green, test_ex_green$prime),
        "advance color"
      ]
    ]);

var x = {
  contents: 0
};

x.contents = x.contents + 1 | 0;

function minAndMax(_lst) {
  return Pervasives.failwith("For you to implement");
}

Test.runAll([
      [
        Caml_obj.caml_equal(Pervasives.failwith("For you to implement"), [
              2,
              9
            ]),
        "min and max"
      ],
      [
        Caml_obj.caml_equal(Pervasives.failwith("For you to implement"), [
              7,
              34
            ]),
        "min and max"
      ]
    ]);

var _four = 4;

var floatFour = 4;

var aBooleanFalse = false;

var oneCardValue = /* Queen */2;

var anotherCardValue = /* Number */{
  _0: 8
};

var example = [
  5,
  "hello",
  /* "A" */65
];

var i = 5;

var c = /* "A" */65;

var intPair = [
  5,
  7
];

var stringPair = [
  "foo",
  "bar"
];

var nestedCharPair = [
  [
    /* "a" */97,
    /* "b" */98
  ],
  [
    /* "c" */99,
    /* "d" */100
  ]
];

var age = 22;

exports._four = _four;
exports.floatFour = floatFour;
exports.intAverage = intAverage;
exports.floatAverage = floatAverage;
exports.firstName = firstName;
exports.lastName = lastName;
exports.fullName = fullName;
exports.aBooleanFalse = aBooleanFalse;
exports._add1 = _add1;
exports.stringAppend = stringAppend;
exports.minus = minus;
exports.half = half;
exports._add = _add;
exports.average = average;
exports.add1 = add1;
exports.square = square;
exports.twice = twice;
exports.add2 = add2;
exports.raiseToTheFourth = raiseToTheFourth;
exports.isSuperman = isSuperman;
exports.nonZero = nonZero;
exports.length = length;
exports.newHead = newHead;
exports.range = range;
exports.plus = plus;
exports.times = times;
exports.addEveryNumberUpTo = addEveryNumberUpTo$1;
exports.factorial = factorial$1;
exports.upTo = upTo;
exports.simplerAddEveryNumberUpTo = simplerAddEveryNumberUpTo;
exports.simplerFactorial = simplerFactorial;
exports.sum = sum;
exports.product = product$1;
exports._every = _every;
exports.simplerSum = simplerSum;
exports.simplerProduct = simplerProduct;
exports.every = every;
exports.largest = largest$1;
exports.smallest = smallest;
exports.simplerLargest = simplerLargest;
exports.simplerSmallest = simplerSmallest;
exports.toString = toString$1;
exports.oneCardValue = oneCardValue;
exports.anotherCardValue = anotherCardValue;
exports.cardValueToString = cardValueToString;
exports.cardValueToScore = cardValueToScore;
exports.example = example;
exports.i = i;
exports.s = s;
exports.c = c;
exports.add = add;
exports.intPair = intPair;
exports.stringPair = stringPair;
exports.nestedCharPair = nestedCharPair;
exports.first = first;
exports.second = second;
exports._divide = _divide;
exports.divide = divide;
exports.modulo = modulo;
exports.whatNumberAmIThinking = whatNumberAmIThinking;
exports.safeDivide = safeDivide;
exports.mapOption = mapOption;
exports.$$double = $$double;
exports.applyIfNonzero = applyIfNonzero;
exports.myInts = myInts;
exports.doubleMyInts = doubleMyInts;
exports.myStrings = myStrings;
exports.myNewInts = myNewInts;
exports.numEvenInts = numEvenInts;
exports.firstNumGreaterThan3 = firstNumGreaterThan3;
exports.Example = Example;
exports.oneLessThanTheMeaningOfLifeEtc = oneLessThanTheMeaningOfLifeEtc;
exports.AbstractTypeExample = AbstractTypeExample;
exports.two = two;
exports.four = four;
exports.Fraction = Fraction;
exports.ints = ints;
exports.sumOfMyInts = sumOfMyInts$1;
exports.MyList = MyList;
exports.acc = acc;
exports.age = age;
exports.print_info = print_info;
exports.print_name = print_name;
exports.addOneToAge = addOneToAge;
exports.modifyPerson = modifyPerson;
exports.ForTesting = ForTesting;
exports.anExample = anExample;
exports.setColor = setColor;
exports.advanceColor = advanceColor;
exports.ForTesting2 = ForTesting2;
exports.x = x;
exports.minAndMax = minAndMax;
/*  Not a pure module */
