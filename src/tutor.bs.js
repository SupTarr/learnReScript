// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

var sumOfFloats = 1 + 2.2 + 3.14;

var bookName = "Deep Work";

var tagline = "Rules for Focused Success in a Distracted World";

var book2 = "Real World OCaml: Functional programming for the masses";

var book = "Deep Work: Rules for Focused Success in a Distracted World";

function bookFormatToString(format) {
  switch (format) {
    case /* Hardcover */0 :
        return "Hardcover";
    case /* Paperback */1 :
        return "Paperback";
    case /* KindleEdition */2 :
        return "Kindle Edition";
    
  }
}

function isElectronic(format) {
  return format >= 2;
}

function nextMoveBy(current) {
  switch (current) {
    case /* PlayerA */0 :
        return /* PlayerB */1;
    case /* PlayerB */1 :
        return /* PlayerC */2;
    case /* PlayerC */2 :
        return /* PlayerA */0;
    
  }
}

var secondMove = nextMoveBy(/* PlayerA */0);

var thirdMove = nextMoveBy(secondMove);

function displayName(user) {
  if (typeof user === "number") {
    return "Anonymous";
  }
  switch (user.TAG | 0) {
    case /* Guest */0 :
        return "Guest#" + String(user._0);
    case /* LoggedInUser */1 :
    case /* Moderator */2 :
        break;
    
  }
  return user._1 + ", " + String(user._0) + " points";
}

var anonymous = displayName(/* Anonymous */0);

var guest42 = displayName({
      TAG: /* Guest */0,
      _0: 42
    });

var milner1934 = displayName({
      TAG: /* LoggedInUser */1,
      _0: 2010,
      _1: "Robin Milner"
    });

var grace1906 = displayName({
      TAG: /* Moderator */2,
      _0: 1992,
      _1: "Grace Hopper"
    });

function formInputToHTML(x) {
  if (typeof x === "number") {
    return "<input type=\"submit\" />";
  }
  switch (x.TAG | 0) {
    case /* Text */0 :
        return "<input type=\"text\" name=\"" + x._0 + "\" />";
    case /* Number */1 :
        return "<input type=\"number\" name=\"" + x._0 + "\" min=\"" + String(x._1) + " max=\"" + String(x._2) + "\"/>";
    case /* Email */2 :
        return "<input type=\"email\" name=\"" + x._0 + "\" />";
    
  }
}

var nameInput = formInputToHTML({
      TAG: /* Text */0,
      _0: "name"
    });

var ageInput = formInputToHTML({
      TAG: /* Number */1,
      _0: "age",
      _1: 18,
      _2: 25
    });

var emailInput = formInputToHTML({
      TAG: /* Email */2,
      _0: "email"
    });

var name = "age-limit";

var ageLimit = [
  name,
  18,
  25
];

var label = "price-range";

var budget2 = [
  label,
  400,
  2500
];

function toNumberFormHTML(input) {
  return "<input type=\"number\" name=\"" + input[0] + "\" min=\"" + String(input[1]) + "\" max=\"" + String(input[2]) + "\"";
}

function toNumberFormHTML2(param) {
  return "<input type=\"number\" name=\"" + param[0] + "\" min=\"" + String(param[1]) + "\" max=\"" + String(param[2]) + "\"";
}

var atom = {
  name: "Atom",
  url: "https://atom.io",
  repositories: 255,
  people: 56
};

var node = {
  name: "Node.js",
  url: "https://nodejs.org",
  repositories: 182,
  people: 375
};

var rails = {
  name: "Ruby on Rails",
  url: "https://rubyonrails.org",
  repositories: 99,
  people: 66
};

function projectLink(param) {
  return "<a href=\"" + param.url + "\">" + param.name + "</a>";
}

projectLink(atom);

projectLink(node);

projectLink(rails);

var codersAtWork = {
  title: "Coders at Work",
  tagline: "Reflections on the Craft of Programming",
  format: /* Paperback */1,
  availableInStock: 10
};

function bookHTML(book) {
  var count = String(book.availableInStock);
  return "<div>\n    <h2>" + book.title + ": " + book.tagline + "</h2>\n    <p>" + count + " new " + bookFormatToString(book.format) + " avialable in stock</p>\n  </div>";
}

bookHTML(codersAtWork);

function drawRectangle(_rectangle) {
  
}

function drawLine(_line) {
  
}

function drawText(_text) {
  
}

function drawShape(shape) {
  switch (shape.TAG | 0) {
    case /* Rectangle */0 :
    case /* Line */1 :
    case /* Text */2 :
        return ;
    
  }
}

var center = [
  960,
  540
];

var leroy = [
  "Xavier",
  "Leroy"
];

var mediumFontSize = [
  "font-size",
  "16px"
];

function first(param) {
  return param[0];
}

function second(param) {
  return param[1];
}

first(center);

first(leroy);

first(mediumFontSize);

second(center);

second(leroy);

second(mediumFontSize);

var lineFromOrigin = [
  [
    0,
    0
  ],
  [
    100,
    100
  ]
];

var lineStart = first(lineFromOrigin);

var lineStartX = first(lineStart);

var listStartY = second(lineStart);

var lineEnd = second(lineFromOrigin);

var lineEndX = first(lineEnd);

var lineEndY = second(lineEnd);

var progLangCreators = [
  [
    "Java",
    "James Gosling"
  ],
  [
    "C",
    "Dennis Ritchie"
  ],
  [
    "Python",
    "Guido van Rossum"
  ],
  [
    "PHP",
    "Rasmus Lerdorf"
  ],
  [
    "Perl",
    "Larry Wall"
  ],
  [
    "JavaScript",
    "Brendan Eich"
  ],
  [
    "Ruby",
    "Yukihiro Matsumoto"
  ],
  [
    "Lisp",
    "John McCarthy"
  ],
  [
    "Pascal",
    "Niklaus Wirth"
  ]
];

var arrayLength = progLangCreators.length;

var arrayFirstItem = Caml_array.get(progLangCreators, 0);

var arrayLastItem = Caml_array.get(progLangCreators, arrayLength - 1 | 0);

function progLangCreatorToString(param) {
  return param[0] + ": " + param[1];
}

progLangCreators.map(function (x) {
      return x;
    });

progLangCreators.map(progLangCreatorToString);

progLangCreators.filter(function (x) {
      return x[0].startsWith("P");
    });

var mh = {
  state: "Maharasthra",
  count: 2342
};

var ka = {
  state: "Karnataka",
  count: 745
};

var dl = {
  state: "Delhi",
  count: 385
};

var wb = {
  state: "West Bengal",
  count: 621
};

var jh = {
  state: "Jharkand",
  count: 111
};

var tn = {
  state: "Tamil Nadu",
  count: 770
};

var totalRecovered = [
    mh,
    ka,
    dl,
    wb,
    jh,
    tn
  ].reduce((function (acc, param) {
        return acc + param.count | 0;
      }), 0);

var dailyRecovered_1 = {
  hd: ka,
  tl: {
    hd: dl,
    tl: {
      hd: wb,
      tl: {
        hd: jh,
        tl: {
          hd: tn,
          tl: /* [] */0
        }
      }
    }
  }
};

var dailyRecovered = {
  hd: mh,
  tl: dailyRecovered_1
};

function toDisplayMetric(metric) {
  return [
          metric.state,
          String(metric.count)
        ];
}

var convertedMetrics = Belt_List.map(dailyRecovered, toDisplayMetric);

var filteredMetrics = Belt_List.keep(dailyRecovered, (function (param) {
        return param.count >= 500;
      }));

var totalRecovered2 = Belt_List.reduce(dailyRecovered, 0, (function (acc, param) {
        return acc + param.count | 0;
      }));

function myCustomMap(xs, f) {
  return Belt_List.reverse(Belt_List.reduce(xs, /* [] */0, (function (acc, x) {
                    return {
                            hd: Curry._1(f, x),
                            tl: acc
                          };
                  })));
}

function myCustomFilter(xs, f) {
  return Belt_List.reverse(Belt_List.reduce(xs, /* [] */0, (function (acc, x) {
                    if (Curry._1(f, x)) {
                      return {
                              hd: Curry._1(f, x),
                              tl: acc
                            };
                    } else {
                      return acc;
                    }
                  })));
}

function describeList(xs) {
  if (xs) {
    return "The first item in this list is: " + xs.hd + " and there are other " + String(Belt_List.length(xs.tl)) + " items.";
  } else {
    return "This list is empty";
  }
}

describeList({
      hd: "hello",
      tl: {
        hd: "world",
        tl: {
          hd: "good",
          tl: {
            hd: "bye",
            tl: /* [] */0
          }
        }
      }
    });

function getSecondListItem(xs) {
  if (!xs) {
    return ;
  }
  var match = xs.tl;
  if (match) {
    return Caml_option.some(match.hd);
  }
  
}

var secondListItem2 = getSecondListItem({
      hd: 1,
      tl: /* [] */0
    });

var secondListItem3 = getSecondListItem({
      hd: "hello",
      tl: {
        hd: "world",
        tl: /* [] */0
      }
    });

var secondListItem4 = getSecondListItem({
      hd: mh,
      tl: {
        hd: ka,
        tl: {
          hd: dl,
          tl: {
            hd: wb,
            tl: {
              hd: jh,
              tl: {
                hd: tn,
                tl: /* [] */0
              }
            }
          }
        }
      }
    });

function whatNumberAmIThinking(myNumber) {
  if (myNumber !== undefined) {
    return "My number is: " + String(myNumber);
  } else {
    return "I'm not thinking of any number!";
  }
}

if (whatNumberAmIThinking(undefined) !== "I'm not thinking of any number!") {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "tutor.res",
          929,
          0
        ],
        Error: new Error()
      };
}

if (whatNumberAmIThinking(7) !== "My number is: 7") {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "tutor.res",
          930,
          0
        ],
        Error: new Error()
      };
}

function safeDivide(dividend, divisor) {
  return Caml_int32.div(dividend, divisor);
}

var bukowski = "If you're going to try, go all the way...";

function printMessage(message) {
  if (message !== undefined) {
    return message;
  } else {
    return "The message is empty";
  }
}

function mapOption(f, opt) {
  if (opt !== undefined) {
    return Caml_option.some(Curry._1(f, Caml_option.valFromOption(opt)));
  }
  
}

function $$double(i) {
  return (i << 1);
}

if (mapOption($$double, undefined) !== undefined) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "tutor.res",
          973,
          9
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(mapOption($$double, 2), 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "tutor.res",
          975,
          9
        ],
        Error: new Error()
      };
}

if (Belt_Option.map(undefined, $$double) !== undefined) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "tutor.res",
          993,
          0
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(Belt_Option.map(2, $$double), 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "tutor.res",
          994,
          0
        ],
        Error: new Error()
      };
}

var exampleHTML = {
  TAG: /* Division */0,
  _0: [
    {
      TAG: /* Heading */1,
      _0: [{
          TAG: /* Anchor */3,
          _0: {
            TAG: /* Fragment */0,
            _0: "hello-world"
          },
          _1: "Jump to here"
        }]
    },
    {
      TAG: /* Paragraph */2,
      _0: "Hello, world!"
    },
    {
      TAG: /* Anchor */3,
      _0: {
        TAG: /* MailTo */1,
        _0: "nowhere@mozilla.org"
      },
      _1: "Send email to nowhere"
    }
  ]
};

function hrefToHTML(href) {
  if (href.TAG) {
    return "mailto:" + href._0;
  } else {
    return "#" + href._0;
  }
}

function anchorToHTML(href, displayText) {
  return "<a href=" + hrefToHTML(href) + ">" + displayText + "</a>";
}

function paragraphToHTML(text) {
  return "<p>" + text + "</p>";
}

function renderHTML(html) {
  var aux = function (depth, x) {
    var indent = " ".repeat((depth << 1));
    var toHTML = function (tag, xs) {
      var partial_arg = depth + 1 | 0;
      var innerHTML = Belt_Array.map(xs, (function (param) {
                return aux(partial_arg, param);
              })).join("\n");
      return indent + "<" + tag + ">\n" + innerHTML + "\n" + indent + "</" + tag + ">";
    };
    switch (x.TAG | 0) {
      case /* Division */0 :
          return toHTML("div", x._0);
      case /* Heading */1 :
          return toHTML("h2", x._0);
      case /* Paragraph */2 :
          return indent + paragraphToHTML(x._0);
      case /* Anchor */3 :
          return indent + anchorToHTML(x._0, x._1);
      
    }
  };
  return aux(0, html);
}

var cssClassName = "Comment Comment-hidden";

var discount = 0;

function calculateDiscount(total) {
  var isRegularDiscount = function (total) {
    if (total >= 200) {
      return total < 500;
    } else {
      return false;
    }
  };
  if (total >= 500) {
    return 20;
  } else {
    isRegularDiscount(total);
    return 0;
  }
}

function wrapTagAroundText(tagName, text) {
  return "<" + tagName + ">" + text + "</" + tagName + ">";
}

function makeHeading1(text) {
  return wrapTagAroundText("h1", text);
}

function makeHeading2(text) {
  return wrapTagAroundText("h2", text);
}

function makeParagraph(param) {
  return wrapTagAroundText("p", param);
}

var mainHeading = wrapTagAroundText("h1", "This is the title of the document");

var subHeading = wrapTagAroundText("h2", "A simple tagline...");

var para1 = wrapTagAroundText("p", "Text content....");

var para2 = wrapTagAroundText("p", "This is the second paragraph...");

function wrapTagAroundHTML(tagName, indent, html) {
  return "<" + tagName + ">\n" + Curry._1(indent, " ") + html + "\n</" + tagName + ">";
}

function indent(x) {
  return x.repeat(2);
}

function makeDiv(param) {
  return wrapTagAroundHTML("div", indent, param);
}

var div1 = wrapTagAroundHTML("div", indent, para1);

var div2 = wrapTagAroundHTML("div", indent, para2);

function betterWrapTagAroundHTML(tag, indent, html) {
  return "<" + tag + ">\n" + Curry._1(indent, " ") + html + "\n</" + tag + ">";
}

function makeBetterDiv(param) {
  return betterWrapTagAroundHTML("div", indent, param);
}

var div3 = betterWrapTagAroundHTML("div", indent, para1);

betterWrapTagAroundHTML("div", indent, para1);

betterWrapTagAroundHTML("div", indent, para1);

betterWrapTagAroundHTML("div", (function (x) {
        return x.repeat(2);
      }), para1);

function altWrapTagAroundHTML(depth, tag, html) {
  return "<" + tag + ">\n" + " ".repeat(depth) + html + "\n</" + tag + ">";
}

function myCharRepeat(count, $$char) {
  var s = $$String.make(1, $$char);
  var _acc = s;
  var _times = count;
  while(true) {
    var times = _times;
    var acc = _acc;
    if (times < 2) {
      return acc;
    }
    var acc$prime = acc + s;
    _times = times - 1 | 0;
    _acc = acc$prime;
    continue ;
  };
}

var cache1 = Belt_MapString.set(undefined, "key1", "value1");

var cache2 = Belt_MapString.set(cache1, "key2", "value2");

var cache3 = Belt_MapString.set(cache2, "key3", "value3");

var cache4 = Belt_MapString.set(cache3, "key4", "value4");

var cache5 = Belt_MapString.set(cache4, "key5", "value5");

Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(undefined, "key1", "value1"), "key2", "value2"), "key3", "value3"), "key4", "value4"), "key5", "value5");

if (Belt_MapString.size(undefined) !== Belt_MapString.size(undefined)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "tutor.res",
          1256,
          0
        ],
        Error: new Error()
      };
}

function aFunctionWhichReturnsNothing(param) {
  
}

function whatIsThisFunction(param) {
  console.log("A debug statement....");
  
}

var hello = "Hello, World!";

var goodbye = "Goodbye!";

var runningTotal = 1;

var sumOfInts = 10;

var joinedStrings = "Hello, World!";

var two = 2;

var one = 1;

var three = 3;

var bookFormat2 = "Kindle Edition";

var firstMove = /* PlayerA */0;

var submit = "<input type=\"submit\" />";

var min = 18;

var max = 25;

var budget = [
  "price-range",
  500,
  1500
];

var ratingFilter = [
  "rating-3-and-above",
  3,
  5
];

var low = 500;

var high = 1500;

var block1 = {
  TAG: /* Rectangle */0,
  _0: {
    x: 100,
    y: 100,
    width: 50,
    height: 50
  }
};

var block2 = {
  TAG: /* Rectangle */0,
  _0: {
    x: 200,
    y: 100,
    width: 50,
    height: 50
  }
};

var block1ToBlock2 = {
  TAG: /* Line */1,
  _0: {
    x: 150,
    y: 125,
    length: 50
  }
};

var textLabel = {
  TAG: /* Text */2,
  _0: {
    text: "Connect",
    fontSize: /* Medium */1,
    fontFamily: /* Monospace */2
  }
};

var secondListItem;

var nothing;

var nothing2;

var downvotes = 10;

var upvotes = 5;

var cartTotal = 200;

var cache;

var anotherCache;

var whatIsTheNatureOfTheVoid;

exports.hello = hello;
exports.goodbye = goodbye;
exports.runningTotal = runningTotal;
exports.sumOfInts = sumOfInts;
exports.sumOfFloats = sumOfFloats;
exports.joinedStrings = joinedStrings;
exports.bookName = bookName;
exports.tagline = tagline;
exports.book2 = book2;
exports.book = book;
exports.two = two;
exports.one = one;
exports.three = three;
exports.bookFormatToString = bookFormatToString;
exports.bookFormat2 = bookFormat2;
exports.isElectronic = isElectronic;
exports.nextMoveBy = nextMoveBy;
exports.firstMove = firstMove;
exports.secondMove = secondMove;
exports.thirdMove = thirdMove;
exports.displayName = displayName;
exports.anonymous = anonymous;
exports.guest42 = guest42;
exports.milner1934 = milner1934;
exports.grace1906 = grace1906;
exports.formInputToHTML = formInputToHTML;
exports.nameInput = nameInput;
exports.ageInput = ageInput;
exports.emailInput = emailInput;
exports.submit = submit;
exports.name = name;
exports.min = min;
exports.max = max;
exports.ageLimit = ageLimit;
exports.budget = budget;
exports.ratingFilter = ratingFilter;
exports.label = label;
exports.low = low;
exports.high = high;
exports.budget2 = budget2;
exports.toNumberFormHTML = toNumberFormHTML;
exports.toNumberFormHTML2 = toNumberFormHTML2;
exports.atom = atom;
exports.node = node;
exports.rails = rails;
exports.projectLink = projectLink;
exports.codersAtWork = codersAtWork;
exports.bookHTML = bookHTML;
exports.drawRectangle = drawRectangle;
exports.drawLine = drawLine;
exports.drawText = drawText;
exports.block1 = block1;
exports.block2 = block2;
exports.block1ToBlock2 = block1ToBlock2;
exports.textLabel = textLabel;
exports.drawShape = drawShape;
exports.center = center;
exports.leroy = leroy;
exports.mediumFontSize = mediumFontSize;
exports.first = first;
exports.second = second;
exports.lineFromOrigin = lineFromOrigin;
exports.lineStart = lineStart;
exports.lineStartX = lineStartX;
exports.listStartY = listStartY;
exports.lineEnd = lineEnd;
exports.lineEndX = lineEndX;
exports.lineEndY = lineEndY;
exports.progLangCreators = progLangCreators;
exports.arrayLength = arrayLength;
exports.arrayFirstItem = arrayFirstItem;
exports.arrayLastItem = arrayLastItem;
exports.progLangCreatorToString = progLangCreatorToString;
exports.mh = mh;
exports.ka = ka;
exports.dl = dl;
exports.wb = wb;
exports.jh = jh;
exports.tn = tn;
exports.totalRecovered = totalRecovered;
exports.dailyRecovered = dailyRecovered;
exports.toDisplayMetric = toDisplayMetric;
exports.convertedMetrics = convertedMetrics;
exports.filteredMetrics = filteredMetrics;
exports.totalRecovered2 = totalRecovered2;
exports.myCustomMap = myCustomMap;
exports.myCustomFilter = myCustomFilter;
exports.describeList = describeList;
exports.getSecondListItem = getSecondListItem;
exports.secondListItem = secondListItem;
exports.secondListItem2 = secondListItem2;
exports.secondListItem3 = secondListItem3;
exports.secondListItem4 = secondListItem4;
exports.nothing = nothing;
exports.nothing2 = nothing2;
exports.whatNumberAmIThinking = whatNumberAmIThinking;
exports.safeDivide = safeDivide;
exports.bukowski = bukowski;
exports.printMessage = printMessage;
exports.mapOption = mapOption;
exports.$$double = $$double;
exports.exampleHTML = exampleHTML;
exports.hrefToHTML = hrefToHTML;
exports.anchorToHTML = anchorToHTML;
exports.paragraphToHTML = paragraphToHTML;
exports.renderHTML = renderHTML;
exports.downvotes = downvotes;
exports.upvotes = upvotes;
exports.cssClassName = cssClassName;
exports.cartTotal = cartTotal;
exports.discount = discount;
exports.calculateDiscount = calculateDiscount;
exports.wrapTagAroundText = wrapTagAroundText;
exports.makeHeading1 = makeHeading1;
exports.makeHeading2 = makeHeading2;
exports.makeParagraph = makeParagraph;
exports.mainHeading = mainHeading;
exports.subHeading = subHeading;
exports.para1 = para1;
exports.para2 = para2;
exports.wrapTagAroundHTML = wrapTagAroundHTML;
exports.indent = indent;
exports.makeDiv = makeDiv;
exports.div1 = div1;
exports.div2 = div2;
exports.betterWrapTagAroundHTML = betterWrapTagAroundHTML;
exports.makeBetterDiv = makeBetterDiv;
exports.div3 = div3;
exports.altWrapTagAroundHTML = altWrapTagAroundHTML;
exports.myCharRepeat = myCharRepeat;
exports.cache = cache;
exports.cache1 = cache1;
exports.cache2 = cache2;
exports.cache3 = cache3;
exports.cache4 = cache4;
exports.cache5 = cache5;
exports.anotherCache = anotherCache;
exports.whatIsTheNatureOfTheVoid = whatIsTheNatureOfTheVoid;
exports.aFunctionWhichReturnsNothing = aFunctionWhichReturnsNothing;
exports.whatIsThisFunction = whatIsThisFunction;
/*  Not a pure module */
